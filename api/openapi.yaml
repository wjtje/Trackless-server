openapi: "3.0.0"
servers:
  - url: http://localhost:55565

info:
  version: '0.2.2'
  title: 'Trackless API'
  contact:
    name: wjtje
    url: https://www.wjtje.ga
  license:
    name: Apache 2.0 License
    url: https://www.apache.org/licenses/LICENSE-2.0.html

components:
  schemas:
    responseInfo200:
      type: object
      properties:
        info:
          type: object
          properties:
            status:
              type: integer
              example: 200
              description: The HTTP status code
            message:
              type: string
              example: Success.
              description: A message from the server about your request
    responseInfo201:
      type: object
      properties:
        info:
          type: object
          properties:
            status:
              type: integer
              example: 201
              description: The HTTP status code
            message:
              type: string
              example: Your request has been fulfilled.
              description: A message from the server about your request
    responseInfo400:
      type: object
      properties:
        info:
          type: object
          properties:
            status:
              type: integer
              example: 400
              description: The HTTP status code
            message:
              type: string
              example: There is something wrong with your request.
              description: A message from the server about your request
    responseInfo403:
      type: object
      properties:
        info:
          type: object
          properties:
            status:
              type: integer
              example: 403
              description: The HTTP status code
            message:
              type: string
              example: You don't have access to do this request.
              description: A message from the server about your request
    responseInfo404:
      type: object
      properties:
        info:
          type: object
          properties:
            status:
              type: integer
              example: 404
              description: The HTTP status code
            message:
              type: string
              example: The resource you are looking for is not here.
              description: A message from the server about your request
    responseInfo500:
      type: object
      properties:
        info:
          type: object
          properties:
            status:
              type: integer
              example: 500
              description: The HTTP status code
            message:
              type: string
              example: Something internally went wrong.
              description: A message from the server about your request

    group_id:
      type: object
      properties:
        group_id:
          type: integer
          example: 6
          description: A unique number for a group
    method:
      type: object
      properties:
        method:
          type: string
          example: get
    url:
      type: object
      properties:
        url:
          type: string
          example: /access
    groupName:
      type: object
      properties:
        groupName:
          type: string
          example: Employee
          description: A groups name
    access_id:
      type: object
      properties:
        access_id:
          type: integer
          example: 3
          description: An unique number for this access rule
    length:
      type: object
      properties:
        length:
          type: integer
          example: 1
          description: The length of the result
    user_id:
      type: object
      properties:
        user_id:
          type: integer
          example: 12
          description: A unique number for a user
    firstname:
      type: object
      properties:
        firstname:
          type: string
          example: Jhon
          description: the firstname of the user
    lastname:
      type: object
      properties:
        lastname:
          type: string
          example: Doe
          description: the lastname of the user
    username:
      type: object
      properties:
        username:
          type: string
          example: Jdoe
          description: The username of the user
    password:
      type: object
      properties:
        password:
          type: string
          example: SomethingStrong
          description: The password of the user
    location_id:
      type: object
      properties:
        location_id:
          type: integer
          example: 10
          description: A unique number for a location
    locationName:
      type: object
      properties:
        name:
          type: string
          description: The name of the location
    locationPlace:
      type: object
      properties:
        place:
          type: string
          description: The place of the location
    locationId:
      type: object
      properties:
        id:
          type: string
          description: A custom id for the location
    time:
      type: object
      properties:
        time:
          type: number
          description: How long the work took
    date:
      type: object
      properties:
        date:
          type: string
          description: yyyy-mm-dd
    description:
      type: object
      properties:
        description:
          type: string
    work_id:
      type: object
      properties:
        work_id:
          type: integer
          example: 67
          description: A unique number for a work

    access:
      type: object
      properties:
        access:
          type: array
          items:
            type: object
            allOf:
              - $ref: "#/components/schemas/access_id"
              - $ref: "#/components/schemas/method"
              - $ref: "#/components/schemas/url"
    users:
      type: object
      properties:
        users:
          type: array
          items:
            type: object
            allOf:
              - $ref: "#/components/schemas/user_id"
              - $ref: "#/components/schemas/firstname"
              - $ref: "#/components/schemas/lastname"
              - $ref: "#/components/schemas/username"

    responseAccess:
      type: object
      allOf:
        - $ref: "#/components/schemas/responseInfo200"
        - $ref: "#/components/schemas/length"
        - type: object
          properties:
            result:
              type: array
              items:
                type: object
                allOf:
                  - $ref: "#/components/schemas/group_id"
                  - $ref: "#/components/schemas/access"
    responseApi:
      type: object
      allOf:
        - $ref: "#/components/schemas/responseInfo200"
        - $ref: "#/components/schemas/length"
        - type: object
          properties:
            result:
              type: array
              items:
                type: object
                properties:
                  api_id:
                    type: integer
                    example: 1
                    description: The unique number of the api key / bearer token
                  createDate:
                    type: string
                    example: 2020-05-19 11:15:50
                    description: The date when the api key / bearer token was created
                  lastUsed:
                    type: string
                    example: 2020-05-20 11:46:34
                    description: The date when the api key / bearer token was last used
                  deviceName:
                    type: string
                    example: My phone
                    description: A name for the api key / bearer token
    responseGroup:
      type: object
      allOf:
        - $ref: "#/components/schemas/responseInfo200"
        - $ref: "#/components/schemas/length"
        - type: object
          properties:
            result:
              type: array
              items:
                type: object
                allOf:
                  - $ref: "#/components/schemas/group_id"
                  - $ref: "#/components/schemas/groupName"
                  - $ref: "#/components/schemas/users"
    responseLocation:
      type: object
      allOf:
        - $ref: "#/components/schemas/responseInfo200"
        - $ref: "#/components/schemas/length"
        - type: object
          properties:
            result:
              type: array
              items:
                type: object
                allOf:
                  - $ref: "#/components/schemas/location_id"
                  - $ref: "#/components/schemas/locationName"
                  - $ref: "#/components/schemas/locationPlace"
                  - $ref: "#/components/schemas/locationId"
    responseUser:
      type: object
      allOf:
        - $ref: "#/components/schemas/responseInfo200"
        - $ref: "#/components/schemas/length"
        - type: object
          properties:
            result:
              type: array
              items:
                type: object
                allOf:
                  - $ref: "#/components/schemas/user_id"
                  - $ref: "#/components/schemas/firstname"
                  - $ref: "#/components/schemas/lastname"
                  - $ref: "#/components/schemas/username"
                  - $ref: "#/components/schemas/group_id"
                  - $ref: "#/components/schemas/groupName"
    responseWork:
      type: object
      allOf:
        - $ref: "#/components/schemas/responseInfo200"
        - $ref: "#/components/schemas/length"
        - type: object
          properties:
            result:
              type: array
              items:
                type: object
                allOf:
                  - $ref: "#/components/schemas/work_id"
                  - type: object
                    properties:
                      user:
                        allOf:
                          - $ref: "#/components/schemas/user_id"
                          - $ref: "#/components/schemas/firstname"
                          - $ref: "#/components/schemas/lastname"
                          - $ref: "#/components/schemas/username"
                  - type: object
                    properties:
                      group:
                        allOf:
                          - $ref: "#/components/schemas/group_id"
                          - $ref: "#/components/schemas/groupName"
                  - type: object
                    properties:
                      location:
                        allOf:
                          - $ref: "#/components/schemas/location_id"
                          - $ref: "#/components/schemas/locationName"
                          - $ref: "#/components/schemas/locationPlace"
                          - $ref: "#/components/schemas/locationId"
                  - $ref: "#/components/schemas/time"
                  - $ref: "#/components/schemas/date"
                  - $ref: "#/components/schemas/description"
                  
  
  responses:
    200:
      description: Your request has been fulfilled. But there is not response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseInfo200"         
    201:
      description: Your request has been fulfilled. The resource has been created.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseInfo201"
    400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseInfo400"
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseInfo403"
    404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseInfo404"
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseInfo500"
  
  parameters:
    api_id:
      in: path
      name: api_id
      description: The unique number of the api key / bearer token
      example: 3
      schema: 
        type: integer
      required: true
    group_id:
      in: path
      name: group_id
      description: The unique number for a group
      example: 2
      schema:
        type: integer
      required: true
    user_id:
      in: path
      name: user_id
      description: The unique number for a user
      example: 5
      schema:
        type: integer
      required: true
    location_id:
      in: path
      name: location_id
      description: The unique number for a location
      example: 15
      schema:
        type: integer
      required: true
    access_id:
      in: path
      name: access_id
      description: The unique number for an access rule
      example: 25
      schema:
        type: integer
      required: true
    work_id:
      in: path
      name: work_id
      description: The unique number for an work item
      example: 146
      schema:
        type: integer
      required: true
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /access:
    get:
      tags:
        - access
      description: See who has access to what command
      security:
        - bearerAuth: []
      responses:
        200:
          description: An array with the result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseAccess"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    post:
      tags:
        - access
      description: Give a group access to a command
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/group_id"
      responses:
        201:
          description: Your request has been fulfilled. The resource has been created.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseInfo201"
                  - $ref: "#/components/schemas/access_id"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseInfo400"
                  - properties:
                      error:
                        type: object
                        properties:
                          message:
                            type: string
                            example: The group is not found.

        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /access/{access_id}:
    delete:
      tags:
        - access
      description: Remove access to a group
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/access_id"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /access/group/{group_id}:
    get:
      tags:
        - access
      description: See what you can do on the server
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/group_id"
      responses:
        200:
          description: An array with the result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseAccess"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /api/{api_id}:
    get:
      tags:
        - api
      description: Get infomation from a single api key / bearer token.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/api_id"
      responses:
        200:
          description: An array with the result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseApi"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - api
      description: Remove a single api key / bearer token
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/api_id"
      responses:
        200:
          $ref: "#/components/responses/200"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  
  /api:
    get:
      tags:
        - api
      description: Get infomation about all your api keys / bearer token
      security:
        - bearerAuth: []
      responses:
        200:
          description: An array with the result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseApi"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  
  /group/{group_id}:
    get:
      tags:
        - group
      description: Get infomation about a single group
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/group_id"
      responses:
        200:
          description: An array with the result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseGroup"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - group
      description: Delete a group and move any user to the default group
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/group_id"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    patch:
      tags:
        - group
      description: Change a group name
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/group_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/groupName"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  
  /group/{group_id}/add/{user_id}:
    post:
      tags:
        - group
      description: Add a user to a group
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/group_id"
        - $ref: "#/components/parameters/user_id"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /group:
    get:
      tags:
        - group
      description: Get infomation about all the groups
      security:
        - bearerAuth: []
      responses:
        200:
          description: An array with the result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseGroup"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    post:
      tags:
        - group
      description: Create a new group
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/groupName"
      responses:
        201:
          description: The resource has been created
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/responseInfo201"
                  - $ref: "#/components/schemas/group_id"

  /location/{location_id}:
    get:
      tags:
        - location
      description: Get infomation about a single location
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/location_id"
      responses:
        200:
          description: An array with the result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseLocation"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - location
      description: Remove a location
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/location_id"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    patch:
      tags:
        - location
      description: Change a location
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/location_id"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /location:
    get:
      tags:
        - location
      description: List all the locations on the server
      security:
        - bearerAuth: []
      responses:
        200:
          description: An array with the result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseLocation"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    post:
      tags:
        - location
      description: Create a new location
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: "#/components/schemas/locationName"
                - $ref: "#/components/schemas/locationPlace"
                - $ref: "#/components/schemas/locationId"
      responses:
        201:
          description: The resource has been created
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/responseInfo201"
                  - $ref: "#/components/schemas/location_id"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /user/{user_id}:
    get:
      tags:
        - user
      description: List all the infomation about a single user.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        200:
          description: An array with the result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseUser"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - user
      description: Remove a single user.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    patch:
      tags:
        - user
      description: Edit a users infomation.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/user_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/firstname"
                - $ref: "#/components/schemas/lastname"
                - $ref: "#/components/schemas/username"
                - $ref: "#/components/schemas/password"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /user:
    get:
      tags:
        - user
      description: Get infomation about all the users on the system.
      security:
        - bearerAuth: []
      responses:
        200:
          description: An array with the result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseUser"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    post:
      tags:
        - user
      description: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/firstname"
                - $ref: "#/components/schemas/lastname"
                - $ref: "#/components/schemas/username"
                - $ref: "#/components/schemas/password"
                - $ref: "#/components/schemas/group_id"
      responses:
        201:
          description: The resource has been created
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/responseInfo201"
                  - $ref: "#/components/schemas/user_id"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  
  /work:
    post:
      tags:
        - work
      description: Add new work to the system
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/location_id"
                - $ref: "#/components/schemas/time"
                - $ref: "#/components/schemas/date"
                - $ref: "#/components/schemas/description"
      responses:
        201:
          description: The resource has been created
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/responseInfo201"
                  - $ref: "#/components/schemas/work_id"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /work/user/{user_id}:
    get:
      tags:
        - work
      description: List all the work for a single user.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        200:
          description: An array with the result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWork"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  
  /work/user/{user_id}/date/{start}/{end}:
    get:
      tags:
        - work
      description: List all the work for a single user.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/user_id"
        - in: path
          name: start
          description: The start date
          example: '2020-06-30'
          schema:
            type: string
          required: true
        - in: path
          name: end
          description: The end date
          example: '2020-07-06'
          schema:
            type: string
          required: true
      responses:
        200:
          description: An array with the result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWork"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /work/user/{user_id}/{work_id}:
    get:
      tags:
        - work
      description: Get information about a single work item
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/work_id"
      responses:
        200:
          description: An array with the result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseWork"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - work
      description: Remove work from the system
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/work_id"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    patch:
      tags:
        - work
      description: Edit a work item
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/work_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/location_id"
                - $ref: "#/components/schemas/time"
                - $ref: "#/components/schemas/date"
                - $ref: "#/components/schemas/description"
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /login:
    post:
      tags:
        - api
      description: Get a new api key / bearer token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Jdoe
                  description: Your username
                password:
                  type: string
                  example: Str0ng!
                  description: Your password
                deviceName:
                  type: string
                  example: My computer at work
                  description: A name for your api key / bearer token
      responses:
        201:
          description: Your api key / bearer token is created
          content:
            application/json:
              schema:
                allOf:
                 - $ref: "#/components/schemas/responseInfo201"
                 - type: object
                   properties:
                    bearer:
                      type: string
                      description: Your new api key / bearer token
        403:
          description: Bad request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/responseInfo403"
                  - type: object
                    properties:
                      error:
                        type: object
                        properties:
                          message:
                            type: string
                            example: Please check your username or password.
                            description: A message from the server about your request
        500:
          $ref: "#/components/responses/500"
  
  /server/about:
    get:
      tags:
        - server
      description: Get the server version
      responses:
        200:
          description: Return the server version
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    example: 0.3-beta.1
                    description: The server version