swagger: "2.0"

info:
  version: "0.4.0"
  title: "Trackless API"
  contact:
    name: "wjtje"
    url: "https://www.wjtje.ga"
  license:
    name: "Apache 2.0 License"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"

paths:
  /group:
    get:
      tags:
        - "group"
      summary: "Get all the groups on the server"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
      security:
        - bearer_token: []
    post:
      tags:
        - "group"
      summary: "Create a new group on the server"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            properties:
              groupName:
                type: "string"
      responses:
        "201":
          description: "Created the new group"
          schema:
            type: "object"
            properties:
              group_id:
                type: "integer"
        "400":
          description: "Something is wrong with your input"
      security:
        - bearer_token: []
  /group/{groupId}:
    get:
      tags:
        - "group"
      summary: "Get infomation about a single group"
      produces:
        - "application/json"
      parameters:
      - in: "path"
        name: "groupId"
        description: "ID of the group to return"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
        400:
          description: "Invalid ID"
        404:
          description: "Group not found"
      security:
        - bearer_token: []
    delete:
      tags:
        - "group"
      summary: "Removes a single group from the server and moves all users to the default group"
      produces:
        - "application/json"
      parameters:
      - in: "path"
        name: "groupId"
        description: "ID of the group to remove"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid ID"
        404:
          description: "Group not found"
      security:
        - bearer_token: []
    patch:
      tags:
        - "group"
      summary: "Edits a group name"
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
      - in: "path"
        name: "groupId"
        description: "ID of the group to edit"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "object"
          properties:
            groupName:
              type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid ID"
        404:
          description: "Group not found"
      security:
        - bearer_token: []
  /group/{groupId}/add/{userId}:
    post:
      tags:
        - "group"
      summary: "Add a user to a group"
      produces:
        - "application/json"
      parameters:
      - in: "path"
        name: "groupId"
        description: "ID of the group "
        required: true
        type: "integer"
      - in: "path"
        name: "userId"
        description: "ID of the user"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid ID"
        404:
          description: "Group or user not found"
      security:
        - bearer_token: []
  /server/about:
    get:
      tags:
        - "server"
      summary: "Get information about the server"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              version:
                type: "string"
                example: "0.4-beta.0"

securityDefinitions:
  bearer_token:
    type: "apiKey"
    name: "api_key"
    in: "header"

definitions:
  Group:
    type: "object"
    properties:
      group_id:
        type: "integer"
      groupName:
        type: "string"
      users:
        type: "array"
        items:
          $ref: "#/definitions/User"
  User:
    type: "object"
    properties:
      user_id:
        type: "integer"
      firstname:
        type: "string"
      lastname:
        type: "string"
      username:
        type: "string"
      group_id:
        type: "integer"
